(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{173:function(s,t,n){"use strict";n.r(t);var a=n(0),e=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("div",{staticClass:"content"},[n("h1",{attrs:{id:"节点启动"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#节点启动","aria-hidden":"true"}},[s._v("#")]),s._v(" 节点启动")]),s._v(" "),n("p",[s._v("本章描述各个区块链节点启动所需设定。")]),s._v(" "),n("p",[s._v("为了让节点程式可以随著系统启动，将节点以服务方式执行。编辑节点服务所需的单元档，让此档内容如「Systemd 服务单元档」所示:")]),s._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[s._v("$ "),n("span",{attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),n("span",{attrs:{class:"token function"}},[s._v("vi")]),s._v(" /etc/systemd/system/zeus-node.service\n")])])]),n("p",[s._v("Systemd 服务单元档(unit file):")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("[Unit]\nDescription = Zeus node\n\n[Service]\nExecStart = /opt/zeus/witness_node -d /opt/zeus/witness_node_data_dir/\n\n[Install]\nWantedBy = multi-user.target\n")])])]),n("p",[s._v("安装服务")]),s._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[s._v("$ "),n("span",{attrs:{class:"token function"}},[s._v("sudo")]),s._v(" systemctl daemon-reload\n$ "),n("span",{attrs:{class:"token function"}},[s._v("sudo")]),s._v(" systemctl "),n("span",{attrs:{class:"token function"}},[s._v("enable")]),s._v(" zeus-node\n")])])]),n("p",[s._v("节点服务单元档安装完成后，节点程式会随系统启动自动执行。")]),s._v(" "),n("p",[s._v("有时需要手动执行、停止或检查服务状态，可以按照下面指令进行。")]),s._v(" "),n("p",[s._v("启动服务:")]),s._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[s._v("$ "),n("span",{attrs:{class:"token function"}},[s._v("sudo")]),s._v(" systemctl start zeus-node\n")])])]),n("p",[s._v("停止服务:")]),s._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[s._v("$ "),n("span",{attrs:{class:"token function"}},[s._v("sudo")]),s._v(" systemctl start zeus-node\n")])])]),n("p",[s._v("检查服务状态:")]),s._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{attrs:{class:"token variable"}},[s._v("$sudo")]),s._v(" systemctl status zeus-node\n")])])]),n("h2",{attrs:{id:"主要出块节点启动"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#主要出块节点启动","aria-hidden":"true"}},[s._v("#")]),s._v(" 主要出块节点启动")]),s._v(" "),n("ol",[n("li",[s._v("建立初始化目录，复制必要档案并执行")])]),s._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[s._v("$ "),n("span",{attrs:{class:"token function"}},[s._v("mkdir")]),s._v(" -p /opt/zeus/\n$ "),n("span",{attrs:{class:"token function"}},[s._v("cp")]),s._v(" witness_node /opt/zeus/\n$ "),n("span",{attrs:{class:"token function"}},[s._v("cp")]),s._v(" genesis.json /opt/zeus/\n$ "),n("span",{attrs:{class:"token function"}},[s._v("cp")]),s._v(" config.ini /opt/zeus/\n$ "),n("span",{attrs:{class:"token function"}},[s._v("cd")]),s._v(" /opt/zeus/\n$ "),n("span",{attrs:{class:"token function"}},[s._v("chmod")]),s._v(" +x witness_node\n$ ./witness_node --genesis-json genesis.json\n"),n("span",{attrs:{class:"token comment"}},[s._v("## 执行后，出现 chain-id 之后，使用 control-c 中断")]),s._v("\n")])])]),n("ol",{attrs:{start:"2"}},[n("li",[s._v("复制主要环境档案到特定目录")])]),s._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[s._v("$ "),n("span",{attrs:{class:"token function"}},[s._v("mv")]),s._v(" genesis.json ./witness_node_data_dir/\n$ "),n("span",{attrs:{class:"token function"}},[s._v("mv")]),s._v(" config.ini ./witness_node_data_dir/\n")])])]),n("ol",{attrs:{start:"3"}},[n("li",[s._v("修改 ./witness_node_data_dir/config.ini 档案")])]),s._v(" "),n("p",[s._v("下面为 config.ini 范例：")]),s._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{attrs:{class:"token comment"}},[s._v("# Endpoint for P2P node to listen on")]),s._v("\n p2p-endpoint "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" 0.0.0.0:35789\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# P2P nodes to connect to on startup (may specify multiple times)")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# seed-node = ## 创世节点此处不需设定")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# JSON array of P2P nodes to connect to on startup")]),s._v("\n seed-nodes "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{attrs:{class:"token comment"}},[s._v("## 创世节点此部分需设定为空")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Pairs of [BLOCK_NUM,BLOCK_ID] that should be enforced as checkpoints.")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# checkpoint =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Endpoint for websocket RPC to listen on")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# rpc-endpoint = ## 创世节点并不会用到RPC 故此处不另做设定")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Endpoint for TLS websocket RPC to listen on")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# rpc-tls-endpoint =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# The TLS certificate file for this server")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# server-pem =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Password for this certificate")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# server-pem-password =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# File to read Genesis State from")]),s._v("\ngenesis-json "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" /opt/zeus/witness_node_data_dir/genesis.json "),n("span",{attrs:{class:"token comment"}},[s._v("## 指定 genesis.json档案位址，这个项目每个节点都必须做设定")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Block signing key to use for init witnesses, overrides genesis file")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# dbg-init-key =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# JSON file specifying API permissions")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# api-access =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Space-separated list of plugins to activate")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# plugins =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Enable block production, even if the chain is stale.")]),s._v("\nenable-stale-production "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{attrs:{class:"token boolean"}},[s._v("true")]),s._v(" "),n("span",{attrs:{class:"token comment"}},[s._v("## 所有的见证人节点此部分需设定为 true才能正确出块。其他同步用全节点这部分应设定为 false。")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Percent of witnesses (0-99) that must be participating in order to produce blocks")]),s._v("\nrequired-participation "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{attrs:{class:"token boolean"}},[s._v("false")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v('# ID of witness controlled by this node (e.g. "1.6.5", quotes are required, may specify multiple times)')]),s._v("\n witness-id "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{attrs:{class:"token string"}},[s._v('"1.6.1"')]),s._v(" "),n("span",{attrs:{class:"token comment"}},[s._v("## witness-id = “1.6.x” x 部分为帐号序列，需要与 genesis.json 内定的见证人序列号一致。也就是 genesis.json中指定的第一位见证人，那么这里就是用 1.6.1。若是第二位见证人，这里就用 1.6.2。这里的id 指定，需要与 genesis.json 里的序列一致，也必须与下面参数中的公钥与私钥一致。（非见证人节点，这个位置就不需要。）")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Tuple of [PublicKey, WIF private key] (may specify multiple times),The owner of the private key is nico")]),s._v("\nprivate-key "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{attrs:{class:"token string"}},[s._v('"MTN6P5hfysmhpniKfY7MbvwU7ZKhsagS6YZ69ZmooZkDtyTU8dtqX"')]),s._v(","),n("span",{attrs:{class:"token string"}},[s._v('"5KHKmBk8jySJC9eZeN9HGBeHo4gE1ULQCkjSpSVSDiVAizZnV2o"')]),n("span",{attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{attrs:{class:"token comment"}},[s._v("## 见证人节点的公钥与私钥，前为公钥后为私钥。这里的资料需要搭配前项 witness-id，必须一致。")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Account ID to track history for (may specify multiple times)")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# track-account =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Keep only those operations in memory that are related to account history tracking")]),s._v("\npartial-operations "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" 1\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Maximum number of operations per account will be kept in memory")]),s._v("\nmax-ops-per-account "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" 1000\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Elastic Search database node url")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# elasticsearch-node-url =")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Number of bulk documents to index on replay(5000)")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# elasticsearch-bulk-replay =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Number of bulk documents to index on a syncronied chain(10)")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# elasticsearch-bulk-sync =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Log bulk events to database")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# elasticsearch-logs =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Use visitor to index additional data(slows down the replay)")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# elasticsearch-visitor =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Track market history by grouping orders into buckets of equal size measured in seconds specified as a JSON array of numbers")]),s._v("\nbucket-size "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("[")]),s._v("60,300,900,1800,3600,14400,86400"),n("span",{attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# How far back in time to track history for each bucket size, measured in the number of buckets (default: 1000)")]),s._v("\nhistory-per-size "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" 1000\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Will only store this amount of matched orders for each market in order history for querying, or those meet the other option, which has more data (default: 1000)")]),s._v("\nmax-order-his-records-per-market "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" 1000\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Will only store matched orders in last X seconds for each market in order history for querying, or those meet the other option, which has more data (default: 259200 (3 days))")]),s._v("\nmax-order-his-seconds-per-market "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" 259200\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# RPC endpoint of a trusted validating node (required)")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# trusted-node =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Block number after which to do a snapshot")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# snapshot-at-block =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Block time (ISO format) after which to do a snapshot")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# snapshot-at-time =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Pathname of JSON file where to store the snapshot")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# snapshot-to =")]),s._v("\n")])])]),n("h2",{attrs:{id:"备援出块节点启动"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#备援出块节点启动","aria-hidden":"true"}},[s._v("#")]),s._v(" 备援出块节点启动")]),s._v(" "),n("ol",[n("li",[s._v("建立初始化目录，复制必要档案并执行")])]),s._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[s._v("$ "),n("span",{attrs:{class:"token function"}},[s._v("mkdir")]),s._v(" -p /opt/zeus/\n$ "),n("span",{attrs:{class:"token function"}},[s._v("cp")]),s._v(" witness_node /opt/zeus/\n$ "),n("span",{attrs:{class:"token function"}},[s._v("cp")]),s._v(" genesis.json /opt/zeus/\n$ "),n("span",{attrs:{class:"token function"}},[s._v("cp")]),s._v(" config.ini /opt/zeus/\n$ "),n("span",{attrs:{class:"token function"}},[s._v("cd")]),s._v(" /opt/zeus/\n$ "),n("span",{attrs:{class:"token function"}},[s._v("chmod")]),s._v(" +x witness_node\n$ ./witness_node --genesis-json genesis.json -s 10.3.4.2:35789 "),n("span",{attrs:{class:"token comment"}},[s._v("##这个为创世节点的IP与端口，联盟见证人节点此处则设定为出口节点IP与端口。")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("## 执行后，出现 chain-id 之后，使用 control-c 中断。需要核对是否与正式链的Chain ID一致。")]),s._v("\n")])])]),n("ol",{attrs:{start:"2"}},[n("li",[s._v("复制主要环境档案到特定目录")])]),s._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[s._v("$ "),n("span",{attrs:{class:"token function"}},[s._v("mv")]),s._v(" genesis.json ./witness_node_data_dir/\n$ "),n("span",{attrs:{class:"token function"}},[s._v("mv")]),s._v(" config.ini ./witness_node_data_dir/\n")])])]),n("ol",{attrs:{start:"3"}},[n("li",[s._v("修改 ./witness_node_data_dir/config.ini 档案")])]),s._v(" "),n("p",[s._v("下面为 config.ini 范例：")]),s._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{attrs:{class:"token comment"}},[s._v("# Endpoint for P2P node to listen on")]),s._v("\n p2p-endpoint "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" 0.0.0.0:35789\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# P2P nodes to connect to on startup (may specify multiple times)")]),s._v("\n seed-node "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" 10.3.4.2:35789 "),n("span",{attrs:{class:"token comment"}},[s._v("## 备援见证人节点，此处需设定为创世节点IP 与端口。联盟主见证人节点与联盟备援见证人节点，这一行设定为出口节点与端口。")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# JSON array of P2P nodes to connect to on startup")]),s._v("\n seed-nodes "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{attrs:{class:"token comment"}},[s._v("## 备援见证人节点此部分需设定为空。联盟主见证人节点与备援见证人节点此处设定亦为空白。")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Pairs of [BLOCK_NUM,BLOCK_ID] that should be enforced as checkpoints.")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# checkpoint =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Endpoint for websocket RPC to listen on")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# rpc-endpoint = ## 见证人节点并不会用到RPC 故此处不另做设定")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Endpoint for TLS websocket RPC to listen on")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# rpc-tls-endpoint =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# The TLS certificate file for this server")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# server-pem =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Password for this certificate")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# server-pem-password =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# File to read Genesis State from")]),s._v("\n genesis-json "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" /opt/zeus/witness_node_data_dir/genesis.json "),n("span",{attrs:{class:"token comment"}},[s._v("## 指定 genesis.json档案位址，这个项目每个节点都必须做设定")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Block signing key to use for init witnesses, overrides genesis file")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# dbg-init-key =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# JSON file specifying API permissions")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# api-access =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Space-separated list of plugins to activate")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# plugins =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Enable block production, even if the chain is stale.")]),s._v("\nenable-stale-production "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{attrs:{class:"token boolean"}},[s._v("true")]),s._v(" "),n("span",{attrs:{class:"token comment"}},[s._v("## 所有的见证人节点此部分需设定为 true才能正确出块。其他同步用全节点这部分应设定为 false。")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Percent of witnesses (0-99) that must be participating in order to produce blocks")]),s._v("\nrequired-participation "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{attrs:{class:"token boolean"}},[s._v("false")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v('# ID of witness controlled by this node (e.g. "1.6.5", quotes are required, may specify multiple times)')]),s._v("\n witness-id "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{attrs:{class:"token string"}},[s._v('"1.6.1"')]),s._v(" "),n("span",{attrs:{class:"token comment"}},[s._v("## witness-id = “1.6.x” x 部分为帐号序列，需要与 genesis.json 内定的见证人序列号一致。也就是 genesis.json中指定的第一位见证人，那么这里就是用 1.6.1。若是第二位见证人，这里就用 1.6.2。这里的id 指定，需要与 genesis.json 里的序列一致，也必须与下面参数中的公钥与私钥一致。（非见证人节点，这个位置就不需要。）")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Tuple of [PublicKey, WIF private key] (may specify multiple times),The owner of the private key is nico")]),s._v("\nprivate-key "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{attrs:{class:"token string"}},[s._v('"MTN6P5hfysmhpniKfY7MbvwU7ZKhsagS6YZ69ZmooZkDtyTU8dtqX"')]),s._v(","),n("span",{attrs:{class:"token string"}},[s._v('"5KHKmBk8jySJC9eZeN9HGBeHo4gE1ULQCkjSpSVSDiVAizZnV2o"')]),n("span",{attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{attrs:{class:"token comment"}},[s._v("## 见证人节点的公钥与私钥，前为公钥后为私钥。这里的资料需要搭配前项 witness-id，必须一致。")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Account ID to track history for (may specify multiple times)")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# track-account =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Keep only those operations in memory that are related to account history tracking")]),s._v("\npartial-operations "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" 1\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Maximum number of operations per account will be kept in memory")]),s._v("\nmax-ops-per-account "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" 1000\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Elastic Search database node url")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# elasticsearch-node-url =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Number of bulk documents to index on replay(5000)")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# elasticsearch-bulk-replay =")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Number of bulk documents to index on a syncronied chain(10)")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# elasticsearch-bulk-sync =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Log bulk events to database")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# elasticsearch-logs =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Use visitor to index additional data(slows down the replay)")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# elasticsearch-visitor =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Track market history by grouping orders into buckets of equal size measured in seconds specified as a JSON array of numbers")]),s._v("\nbucket-size "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("[")]),s._v("60,300,900,1800,3600,14400,86400"),n("span",{attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# How far back in time to track history for each bucket size, measured in the number of buckets (default: 1000)")]),s._v("\nhistory-per-size "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" 1000\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Will only store this amount of matched orders for each market in order history for querying, or those meet the other option, which has more data (default: 1000)")]),s._v("\nmax-order-his-records-per-market "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" 1000\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Will only store matched orders in last X seconds for each market in order history for querying, or those meet the other option, which has more data (default: 259200 (3 days))")]),s._v("\nmax-order-his-seconds-per-market "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" 259200\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# RPC endpoint of a trusted validating node (required)")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# trusted-node =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Block number after which to do a snapshot")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# snapshot-at-block =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Block time (ISO format) after which to do a snapshot")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# snapshot-at-time =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Pathname of JSON file where to store the snapshot")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# snapshot-to =")]),s._v("\n")])])]),n("h2",{attrs:{id:"api-全节点启动"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#api-全节点启动","aria-hidden":"true"}},[s._v("#")]),s._v(" API 全节点启动")]),s._v(" "),n("ol",[n("li",[s._v("建立初始化目录，复制必要档案并执行")])]),s._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[s._v("$ "),n("span",{attrs:{class:"token function"}},[s._v("mkdir")]),s._v(" -p /opt/zeus/\n$ "),n("span",{attrs:{class:"token function"}},[s._v("cp")]),s._v(" witness_node /opt/zeus/\n$ "),n("span",{attrs:{class:"token function"}},[s._v("cp")]),s._v(" genesis.json /opt/zeus/\n$ "),n("span",{attrs:{class:"token function"}},[s._v("cp")]),s._v(" config.ini /opt/zeus/\n$ "),n("span",{attrs:{class:"token function"}},[s._v("cd")]),s._v(" /opt/zeus/\n$ "),n("span",{attrs:{class:"token function"}},[s._v("chmod")]),s._v(" +x witness_node\n$ ./witness_node --genesis-json genesis.json -s 10.3.4.2:35789 "),n("span",{attrs:{class:"token comment"}},[s._v("##这个为创世节点的IP与端口，联盟见证人节点此处则设定为出口节点IP与端口。")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("## 执行后，出现 chain-id 之后，使用 control-c 中断。需要核对是否与正式链的Chain ID一致。")]),s._v("\n")])])]),n("ol",{attrs:{start:"2"}},[n("li",[s._v("复制主要环境档案到特定目录")])]),s._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[s._v("$ "),n("span",{attrs:{class:"token function"}},[s._v("mv")]),s._v(" genesis.json ./witness_node_data_dir/\n$ "),n("span",{attrs:{class:"token function"}},[s._v("mv")]),s._v(" config.ini ./witness_node_data_dir/\n")])])]),n("ol",{attrs:{start:"3"}},[n("li",[s._v("修改 ./witness_node_data_dir/config.ini 档案")])]),s._v(" "),n("p",[s._v("下面为 config.ini 范例：")]),s._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{attrs:{class:"token comment"}},[s._v("# Endpoint for P2P node to listen on")]),s._v("\n p2p-endpoint "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" 0.0.0.0:35789\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# P2P nodes to connect to on startup (may specify multiple times)")]),s._v("\n seed-node "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" 10.3.4.2:35789 "),n("span",{attrs:{class:"token comment"}},[s._v("## 备援见证人节点，此处需设定为创世节点IP 与端口。联盟主见证人节点与联盟备援见证人节点，这一行设定为出口节点与端口。")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# JSON array of P2P nodes to connect to on startup")]),s._v("\n seed-nodes "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{attrs:{class:"token comment"}},[s._v("## 备援见证人节点此部分需设定为空。联盟主见证人节点与备援见证人节点此处设定亦为空白。")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Pairs of [BLOCK_NUM,BLOCK_ID] that should be enforced as checkpoints.")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# checkpoint =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Endpoint for websocket RPC to listen on")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# rpc-endpoint = ## 见证人节点并不会用到RPC 故此处不另做设定")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Endpoint for TLS websocket RPC to listen on")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# rpc-tls-endpoint =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# The TLS certificate file for this server")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# server-pem =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Password for this certificate")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# server-pem-password =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# File to read Genesis State from")]),s._v("\n genesis-json "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" /opt/zeus/witness_node_data_dir/genesis.json "),n("span",{attrs:{class:"token comment"}},[s._v("## 指定 genesis.json档案位址，这个项目每个节点都必须做设定")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Block signing key to use for init witnesses, overrides genesis file")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# dbg-init-key =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# JSON file specifying API permissions")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# api-access =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Space-separated list of plugins to activate")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# plugins =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Enable block production, even if the chain is stale.")]),s._v("\nenable-stale-production "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{attrs:{class:"token boolean"}},[s._v("true")]),s._v(" "),n("span",{attrs:{class:"token comment"}},[s._v("## 所有的见证人节点此部分需设定为 true才能正确出块。其他同步用全节点这部分应设定为 false。")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Percent of witnesses (0-99) that must be participating in order to produce blocks")]),s._v("\nrequired-participation "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{attrs:{class:"token boolean"}},[s._v("false")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v('# ID of witness controlled by this node (e.g. "1.6.5", quotes are required, may specify multiple times)')]),s._v("\n witness-id "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{attrs:{class:"token string"}},[s._v('"1.6.1"')]),s._v(" "),n("span",{attrs:{class:"token comment"}},[s._v("## witness-id = “1.6.x” x 部分为帐号序列，需要与 genesis.json 内定的见证人序列号一致。也就是 genesis.json中指定的第一位见证人，那么这里就是用 1.6.1。若是第二位见证人，这里就用 1.6.2。这里的id 指定，需要与 genesis.json 里的序列一致，也必须与下面参数中的公钥与私钥一致。（非见证人节点，这个位置就不需要。）")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Tuple of [PublicKey, WIF private key] (may specify multiple times),The owner of the private key is nico")]),s._v("\nprivate-key "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{attrs:{class:"token string"}},[s._v('"MTN6P5hfysmhpniKfY7MbvwU7ZKhsagS6YZ69ZmooZkDtyTU8dtqX"')]),s._v(","),n("span",{attrs:{class:"token string"}},[s._v('"5KHKmBk8jySJC9eZeN9HGBeHo4gE1ULQCkjSpSVSDiVAizZnV2o"')]),n("span",{attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{attrs:{class:"token comment"}},[s._v("## 见证人节点的公钥与私钥，前为公钥后为私钥。这里的资料需要搭配前项 witness-id，必须一致。")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Account ID to track history for (may specify multiple times)")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# track-account =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Keep only those operations in memory that are related to account history tracking")]),s._v("\npartial-operations "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" 1\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Maximum number of operations per account will be kept in memory")]),s._v("\nmax-ops-per-account "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" 1000\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Elastic Search database node url")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# elasticsearch-node-url =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Number of bulk documents to index on replay(5000)")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# elasticsearch-bulk-replay =")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Number of bulk documents to index on a syncronied chain(10)")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# elasticsearch-bulk-sync =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Log bulk events to database")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# elasticsearch-logs =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Use visitor to index additional data(slows down the replay)")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# elasticsearch-visitor =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Track market history by grouping orders into buckets of equal size measured in seconds specified as a JSON array of numbers")]),s._v("\nbucket-size "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("[")]),s._v("60,300,900,1800,3600,14400,86400"),n("span",{attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# How far back in time to track history for each bucket size, measured in the number of buckets (default: 1000)")]),s._v("\nhistory-per-size "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" 1000\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Will only store this amount of matched orders for each market in order history for querying, or those meet the other option, which has more data (default: 1000)")]),s._v("\nmax-order-his-records-per-market "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" 1000\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Will only store matched orders in last X seconds for each market in order history for querying, or those meet the other option, which has more data (default: 259200 (3 days))")]),s._v("\nmax-order-his-seconds-per-market "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" 259200\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# RPC endpoint of a trusted validating node (required)")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# trusted-node =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Block number after which to do a snapshot")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# snapshot-at-block =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Block time (ISO format) after which to do a snapshot")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# snapshot-at-time =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Pathname of JSON file where to store the snapshot")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# snapshot-to =")]),s._v("\n")])])]),n("h2",{attrs:{id:"出站与入站全节点启动"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#出站与入站全节点启动","aria-hidden":"true"}},[s._v("#")]),s._v(" 出站与入站全节点启动")]),s._v(" "),n("ol",[n("li",[s._v("建立初始化目录，复制必要档案并执行")])]),s._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[s._v("$ "),n("span",{attrs:{class:"token function"}},[s._v("mkdir")]),s._v(" -p /opt/zeus/\n$ "),n("span",{attrs:{class:"token function"}},[s._v("cp")]),s._v(" witness_node /opt/zeus/\n$ "),n("span",{attrs:{class:"token function"}},[s._v("cp")]),s._v(" genesis.json /opt/zeus/\n$ "),n("span",{attrs:{class:"token function"}},[s._v("cp")]),s._v(" config.ini /opt/zeus/\n$ "),n("span",{attrs:{class:"token function"}},[s._v("cd")]),s._v(" /opt/zeus/\n$ "),n("span",{attrs:{class:"token function"}},[s._v("chmod")]),s._v(" +x witness_node\n$ ./witness_node --genesis-json genesis.json -s 10.3.4.2:35789 "),n("span",{attrs:{class:"token comment"}},[s._v("##这个为创世节点的IP与端口，联盟见证人节点此处则设定为出口节点IP与端口。")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("## 执行后，出现 chain-id 之后，使用 control-c 中断。需要核对是否与正式链的Chain ID一致。")]),s._v("\n")])])]),n("ol",{attrs:{start:"2"}},[n("li",[s._v("复制主要环境档案到特定目录")])]),s._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[s._v("$ "),n("span",{attrs:{class:"token function"}},[s._v("mv")]),s._v(" genesis.json ./witness_node_data_dir/\n$ "),n("span",{attrs:{class:"token function"}},[s._v("mv")]),s._v(" config.ini ./witness_node_data_dir/\n")])])]),n("ol",{attrs:{start:"3"}},[n("li",[s._v("修改 ./witness_node_data_dir/config.ini 档案")])]),s._v(" "),n("p",[s._v("下面为 config.ini 范例：")]),s._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{attrs:{class:"token comment"}},[s._v("# Endpoint for P2P node to listen on")]),s._v("\n p2p-endpoint "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" 0.0.0.0:35789\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# P2P nodes to connect to on startup (may specify multiple times)")]),s._v("\n seed-node "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" 10.3.4.2:35789 "),n("span",{attrs:{class:"token comment"}},[s._v("## 备援见证人节点，此处需设定为创世节点IP 与端口。联盟主见证人节点与联盟备援见证人节点，这一行设定为出口节点与端口。")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# JSON array of P2P nodes to connect to on startup")]),s._v("\n seed-nodes "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{attrs:{class:"token comment"}},[s._v("## 备援见证人节点此部分需设定为空。联盟主见证人节点与备援见证人节点此处设定亦为空白。")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Pairs of [BLOCK_NUM,BLOCK_ID] that should be enforced as checkpoints.")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# checkpoint =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Endpoint for websocket RPC to listen on")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# rpc-endpoint = ## 见证人节点并不会用到RPC 故此处不另做设定")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Endpoint for TLS websocket RPC to listen on")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# rpc-tls-endpoint =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# The TLS certificate file for this server")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# server-pem =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Password for this certificate")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# server-pem-password =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# File to read Genesis State from")]),s._v("\n genesis-json "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" /opt/zeus/witness_node_data_dir/genesis.json "),n("span",{attrs:{class:"token comment"}},[s._v("## 指定 genesis.json档案位址，这个项目每个节点都必须做设定")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Block signing key to use for init witnesses, overrides genesis file")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# dbg-init-key =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# JSON file specifying API permissions")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# api-access =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Space-separated list of plugins to activate")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# plugins =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Enable block production, even if the chain is stale.")]),s._v("\nenable-stale-production "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{attrs:{class:"token boolean"}},[s._v("true")]),s._v(" "),n("span",{attrs:{class:"token comment"}},[s._v("## 所有的见证人节点此部分需设定为 true才能正确出块。其他同步用全节点这部分应设定为 flase。")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Percent of witnesses (0-99) that must be participating in order to produce blocks")]),s._v("\nrequired-participation "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{attrs:{class:"token boolean"}},[s._v("false")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v('# ID of witness controlled by this node (e.g. "1.6.5", quotes are required, may specify multiple times)')]),s._v("\n witness-id "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{attrs:{class:"token string"}},[s._v('"1.6.1"')]),s._v(" "),n("span",{attrs:{class:"token comment"}},[s._v("## witness-id = “1.6.x” x 部分为帐号序列，需要与 genesis.json 内定的见证人序列号一致。也就是 genesis.json中指定的第一位见证人，那么这里就是用 1.6.1。若是第二位见证人，这里就用 1.6.2。这里的id 指定，需要与 genesis.json 里的序列一致，也必须与下面参数中的公钥与私钥一致。（非见证人节点，这个位置就不需要。）")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Tuple of [PublicKey, WIF private key] (may specify multiple times),The owner of the private key is nico")]),s._v("\nprivate-key "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{attrs:{class:"token string"}},[s._v('"MTN6P5hfysmhpniKfY7MbvwU7ZKhsagS6YZ69ZmooZkDtyTU8dtqX"')]),s._v(","),n("span",{attrs:{class:"token string"}},[s._v('"5KHKmBk8jySJC9eZeN9HGBeHo4gE1ULQCkjSpSVSDiVAizZnV2o"')]),n("span",{attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{attrs:{class:"token comment"}},[s._v("## 见证人节点的公钥与私钥，前为公钥后为私钥。这里的资料需要搭配前项 witness-id，必须一致。")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Account ID to track history for (may specify multiple times)")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# track-account =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Keep only those operations in memory that are related to account history tracking")]),s._v("\npartial-operations "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" 1\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Maximum number of operations per account will be kept in memory")]),s._v("\nmax-ops-per-account "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" 1000\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Elastic Search database node url")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# elasticsearch-node-url =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Number of bulk documents to index on replay(5000)")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# elasticsearch-bulk-replay =")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Number of bulk documents to index on a syncronied chain(10)")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# elasticsearch-bulk-sync =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Log bulk events to database")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# elasticsearch-logs =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Use visitor to index additional data(slows down the replay)")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# elasticsearch-visitor =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Track market history by grouping orders into buckets of equal size measured in seconds specified as a JSON array of numbers")]),s._v("\nbucket-size "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("[")]),s._v("60,300,900,1800,3600,14400,86400"),n("span",{attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# How far back in time to track history for each bucket size, measured in the number of buckets (default: 1000)")]),s._v("\nhistory-per-size "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" 1000\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Will only store this amount of matched orders for each market in order history for querying, or those meet the other option, which has more data (default: 1000)")]),s._v("\nmax-order-his-records-per-market "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" 1000\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Will only store matched orders in last X seconds for each market in order history for querying, or those meet the other option, which has more data (default: 259200 (3 days))")]),s._v("\nmax-order-his-seconds-per-market "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" 259200\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# RPC endpoint of a trusted validating node (required)")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# trusted-node =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Block number after which to do a snapshot")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# snapshot-at-block =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Block time (ISO format) after which to do a snapshot")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# snapshot-at-time =")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("# Pathname of JSON file where to store the snapshot")]),s._v("\n"),n("span",{attrs:{class:"token comment"}},[s._v("# snapshot-to =")]),s._v("\n")])])])])}],!1,null,null,null);t.default=e.exports}}]);